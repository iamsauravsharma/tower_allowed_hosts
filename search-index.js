var searchIndex = new Map(JSON.parse('[\
["tower_allowed_hosts",{"doc":"Crate which provides allowed hosts layer for tower based …","t":"ECCCGPPNNNNNNNNNNFNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["AllowedHostLayer","error","extension","service","Error","FailedToResolveHost","HostNotAllowed","borrow","borrow_mut","fmt","fmt","from","into","to_string","try_from","try_into","type_id","Host","borrow","borrow_mut","clone","clone_into","from","into","to_owned","try_from","try_into","type_id","AllowedHost","AllowedHostFuture","AllowedHostLayer","allowed_hosts","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","default","extend","extend_regex","extend_wildcard","from","from","from","into","into","into","into_future","layer","poll","poll_ready","set_use_forwarded","set_use_x_forwarded_host","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"tower_allowed_hosts"],[4,"tower_allowed_hosts::error"],[17,"tower_allowed_hosts::extension"],[28,"tower_allowed_hosts::service"],[70,"core::fmt"],[71,"core::fmt"],[72,"core::result"],[73,"core::any"],[74,"http::request"],[75,"http::response"],[76,"tower_service"],[77,"core::clone"],[78,"core::convert"],[79,"core::iter::traits::collect"],[80,"regex::regex::string"],[81,"core::pin"],[82,"core::task::wake"],[83,"core::task::poll"],[84,"tower"],[85,"core::future::future"]],"d":["","module for error","Module for extension","module for layer, service and future","Enum for different error","error when host is failed to resolve","error raised when host is not allowed","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Extension to store allowed host value.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Allowed hosts service","Future for Allowed hosts","Allowed hosts layer which implements tower layer trait and …","Get allowed hosts","","","","","","","","","","","","","Extend allowed hosts list using normal string. To match …","Extend allowed hosts list using regex. Regex is check to …","Extend allowed hosts list using wildcard.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Set <code>use_forwarded</code> to provided value. If it is set to true …","Set <code>use_x_forwarded_host</code> to provided value. If it is set …","","","","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,7,7,7,7,7,7,7,7,7,7,0,0,0,9,9,11,21,9,11,21,11,9,11,9,11,9,9,9,9,9,11,21,9,11,21,21,9,21,11,9,9,9,11,9,11,21,9,11,21,9,11,21],"f":"```````{ce{}{}}0{{bd}f}0{cc{}}2{ch{}}{c{{j{e}}}{}{}}0{cl{}}`55{nn}{{ce}A`{}{}}577332```{Ab{{Ad{h}}}}888888{{{Af{g}}{Ah{c}}}i{}{}{{An{{Ah{c}}}{{Aj{{Al{e}}}}}}}{}}{AbAb}{{{Af{c}}}{{Af{c}}}B`}44{{}Ab}{{Abe}Ab{{Bb{h}}}{{Bf{}{{Bd{c}}}}}}{{Abc}Ab{{Bf{}{{Bd{Bh}}}}}}1<<<>>>{c{}{}}{{Abc}e{}{}}{{{Bl{{Bj{g}}}}Bn}{{C`{i}}}{}{{Bb{Cb}}}{{Cf{}{{Cd{{j{ce}}}}}}}{}}{{{Af{g}}Bn}{{C`{{j{A`i}}}}}{}{}{{An{{Ah{c}}}{{Aj{{Al{e}}}}}}}{}}{{AbCh}Ab}0{ce{}{}}0{c{{j{e}}}{}{}}00000{cl{}}00","c":[],"p":[[6,"Error",4],[5,"Formatter",70],[8,"Result",70],[5,"String",71],[6,"Result",72],[5,"TypeId",73],[5,"Host",17],[1,"unit"],[5,"AllowedHostLayer",28],[1,"slice"],[5,"AllowedHost",28],[5,"Request",74],[17,"Response"],[5,"Response",75],[10,"Service",76],[10,"Clone",77],[10,"Into",78],[17,"Item"],[10,"IntoIterator",79],[5,"Regex",80],[5,"AllowedHostFuture",28],[5,"Pin",81],[5,"Context",82],[6,"Poll",83],[8,"BoxError",84],[17,"Output"],[10,"Future",85],[1,"bool"]],"b":[[9,"impl-Display-for-Error"],[10,"impl-Debug-for-Error"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
