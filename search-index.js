var searchIndex = JSON.parse('{\
"tower_allowed_hosts":{"doc":"Crate which provides allowed hosts layer for tower based …","t":"DDDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AllowedHost","AllowedHostFuture","AllowedHostLayer","Error","FailedToResolveHost","HostNotAllowed","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","from","from","into","into","into","into","into_future","layer","new","new_both","new_regex","poll","poll_ready","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_host","with_regex_host"],"q":[[0,"tower_allowed_hosts"],[54,"http::request"],[55,"tower_service"],[56,"core::clone"],[57,"core::fmt"],[58,"core::fmt"],[59,"core::pin"],[60,"core::task::wake"],[61,"core::task::poll"],[62,"core::future::future"],[63,"core::result"],[64,"alloc::string"],[65,"core::any"],[66,"core::convert"],[67,"regex::regex::string"]],"d":["Allowed hosts service","Future for Allowed hosts","Allowed hosts layer which implements tower layer trait and …","Enum for different error","error when host is failed to resolve","error raised when host is not allowed","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create new allowed hosts layer","Create new allowed hosts layer with both regex list as …","Create new allowed hosts layer with regex","","","","","","","","","","","","","","","","","","Extend allowed hosts list","Extend allowed hosts regex list"],"i":[0,0,0,0,7,7,7,4,1,11,7,4,1,11,1,4,1,4,1,4,7,7,7,4,1,11,7,4,1,11,11,4,4,4,4,11,1,4,1,7,7,4,1,11,7,4,1,11,7,4,1,11,4,4],"f":[0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-2]],[2,[-1]]],[],[],[[3,[[2,[-1]]]]]],[4,4],[[[1,[-1]]],[[1,[-1]]],5],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[],4],[[7,8],9],[[7,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[4,-1],[],[]],[-1,4,10],[[-1,-2],4,10,10],[-1,4,10],[[[12,[[11,[-1]]]],13],14,15],[[[1,[-2]],13],[[14,[[16,[6]]]]],[],[[3,[[2,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,17,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[4,-1],4,[[19,[17]]]],[[4,20],4]],"c":[],"p":[[3,"AllowedHost",0],[3,"Request",54],[8,"Service",55],[3,"AllowedHostLayer",0],[8,"Clone",56],[15,"tuple"],[4,"Error",0],[3,"Formatter",57],[6,"Result",57],[8,"IntoIterator",58],[3,"AllowedHostFuture",0],[3,"Pin",59],[3,"Context",60],[4,"Poll",61],[8,"Future",62],[4,"Result",63],[3,"String",64],[3,"TypeId",65],[8,"Into",66],[3,"Regex",67]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
