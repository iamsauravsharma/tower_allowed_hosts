var searchIndex = JSON.parse('{\
"tower_allowed_hosts":{"doc":"Crate which provides allowed hosts layer for tower based …","t":"FFFGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["AllowedHost","AllowedHostFuture","AllowedHostLayer","Error","FailedToResolveHost","HostNotAllowed","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","default","extend_host","extend_regex_host","fmt","fmt","from","from","from","from","into","into","into","into","into_future","layer","new","new_regex","poll","poll_ready","set_use_forwarded","set_use_x_forwarded_host","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"tower_allowed_hosts"],[55,"http::request"],[56,"http::response"],[57,"tower_service"],[58,"core::clone"],[59,"alloc::string"],[60,"core::convert"],[61,"regex::regex::string"],[62,"core::fmt"],[63,"core::fmt"],[64,"core::pin"],[65,"core::task::wake"],[66,"core::task::poll"],[67,"tower"],[68,"core::result"],[69,"core::future::future"],[70,"core::any"]],"d":["Allowed hosts service","Future for Allowed hosts","Allowed hosts layer which implements tower layer trait and …","Enum for different error","error when host is failed to resolve","error raised when host is not allowed","","","","","","","","","","","","","","","Extend allowed hosts list","Extend allowed hosts regex list","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create new allowed hosts layer","Create new allowed hosts layer with regex","","","Set <code>use_forwarded</code> to provided value. If it is set to true …","Set <code>use_x_forwarded_host</code> to provided value. If it is set …","","","","","","","","","","","","","","",""],"i":[0,0,0,0,12,12,12,6,1,17,12,6,1,17,1,6,1,6,1,6,6,6,12,12,12,6,1,17,12,6,1,17,17,6,6,6,17,1,6,6,6,1,12,12,6,1,17,12,6,1,17,12,6,1,17],"f":[0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-3]],[2,[-1]]],-4,[],[],[[5,[[2,[-1]]],[[3,[[4,[-2]]]]]]],[]],[6,6],[[[1,[-1]]],[[1,[-1]]],7],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[],6],[[6,-1],6,[[10,[9]]]],[[6,11],6],[[12,13],14],[[12,13],14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[6,-1],-2,[],[]],[-2,6,[[10,[9]]],[[16,[],[[15,[-1]]]]]],[-1,6,[[16,[],[[15,[11]]]]]],[[[18,[[17,[-3]]]],19],[[20,[-4]]],[],[[10,[21]]],[[24,[],[[22,[[23,[-1,-2]]]]]]],[]],[[[1,[-3]],19],[[20,[[23,[8,-4]]]]],[],[],[[5,[[2,[-1]]],[[3,[[4,[-2]]]]]]],[]],[[6,25],6],[[6,25],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]]],"c":[],"p":[[5,"AllowedHost",0],[5,"Request",55],[17,"Response"],[5,"Response",56],[10,"Service",57],[5,"AllowedHostLayer",0],[10,"Clone",58],[1,"tuple"],[5,"String",59],[10,"Into",60],[5,"Regex",61],[6,"Error",0],[5,"Formatter",62],[8,"Result",62],[17,"Item"],[10,"IntoIterator",63],[5,"AllowedHostFuture",0],[5,"Pin",64],[5,"Context",65],[6,"Poll",66],[8,"BoxError",67],[17,"Output"],[6,"Result",68],[10,"Future",69],[1,"bool"],[5,"TypeId",70]],"b":[[22,"impl-Debug-for-Error"],[23,"impl-Display-for-Error"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
