var searchIndex = JSON.parse('{\
"tower_allowed_hosts":{"doc":"Crate which provides allowed hosts layer for tower based …","t":"DDDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AllowedHost","AllowedHostFuture","AllowedHostLayer","Error","FailedToResolveHost","HostNotAllowed","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","fmt","fmt","from","from","from","from","into","into","into","into","into_future","layer","new","poll","poll_ready","provide","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"tower_allowed_hosts"]],"d":["Allowed hosts service","Future for Allowed hosts","Allowed hosts layer which implements tower layer trait and …","Enum for different error","error when host is failed to resolve","error raised when host is not allowed","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create new allowed hosts layer","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,6,6,6,4,3,12,6,4,3,12,3,4,3,4,3,6,6,6,4,3,12,6,4,3,12,12,4,4,12,3,6,4,3,6,6,4,3,12,6,4,3,12,6,4,3,12],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[[2,[1]]]],1]],[4,4],[[[3,[5]]],[[3,[5]]]],[[]],[[]],[[6,7],8],[[6,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4],[[[10,[9]]],4],[[[13,[[12,[11]]]],14],15],[[[3,[[2,[1]]]],14],[[15,[16]]]],[17],[[]],[[]],[[],18],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],19],[[],19],[[],19],[[],19]],"c":[],"p":[[3,"Request"],[8,"Service"],[3,"AllowedHost"],[3,"AllowedHostLayer"],[8,"Clone"],[4,"Error"],[3,"Formatter"],[6,"Result"],[3,"Regex"],[15,"slice"],[8,"Future"],[3,"AllowedHostFuture"],[3,"Pin"],[3,"Context"],[4,"Poll"],[4,"Result"],[3,"Demand"],[3,"String"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
