var searchIndex = new Map(JSON.parse('[\
["tower_allowed_hosts",{"doc":"Crate which provides allowed hosts layer for tower based …","t":"ECCCGPPNNNNNNNNNNFNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["AllowedHostLayer","error","extension","service","Error","FailedToResolveHost","HostNotAllowed","borrow","borrow_mut","fmt","fmt","from","into","to_string","try_from","try_into","type_id","Host","borrow","borrow_mut","clone","clone_into","from","into","to_owned","try_from","try_into","type_id","AllowedHost","AllowedHostFuture","AllowedHostLayer","allowed_hosts","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","default","extend_host","from","from","from","into","into","into","into_future","layer","new","poll","poll_ready","set_use_forwarded","set_use_x_forwarded_host","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"tower_allowed_hosts"],[4,"tower_allowed_hosts::error"],[17,"tower_allowed_hosts::extension"],[28,"tower_allowed_hosts::service"],[69,"core::fmt"],[70,"core::fmt"],[71,"core::result"],[72,"core::any"],[73,"http::request"],[74,"http::response"],[75,"tower_service"],[76,"core::clone"],[77,"core::convert"],[78,"core::iter::traits::collect"],[79,"core::pin"],[80,"core::task::wake"],[81,"core::task::poll"],[82,"tower"],[83,"core::future::future"]],"d":["","module for error","Module for extension","module for layer, service and future","Enum for different error","error when host is failed to resolve","error raised when host is not allowed","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Extension to store allowed host value.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Allowed hosts service","Future for Allowed hosts","Allowed hosts layer which implements tower layer trait and …","Get allowed hosts","","","","","","","","","","","","","Extend allowed hosts list","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create new allowed hosts layer.","","","Set <code>use_forwarded</code> to provided value. If it is set to true …","Set <code>use_x_forwarded_host</code> to provided value. If it is set …","","","","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,7,7,7,7,7,7,7,7,7,7,0,0,0,9,9,11,20,9,11,20,11,9,11,9,11,9,9,9,11,20,9,11,20,20,9,9,20,11,9,9,9,11,9,11,20,9,11,20,9,11,20],"f":"```````{ce{}{}}0{{bd}f}0{cc{}}2{ch{}}{c{{j{e}}}{}{}}0{cl{}}`55{nn}{{ce}A`{}{}}577332```{Ab{{Ad{h}}}}888888{{{Af{g}}{Ah{c}}}i{}{}{{An{{Ah{c}}}{{Aj{{Al{e}}}}}}}{}}{AbAb}{{{Af{c}}}{{Af{c}}}B`}44{{}Ab}{{Abc}Ab{{Bb{h}}}};;;==={c{}{}}{{Abc}e{}{}}{eAb{{Bb{h}}}{{Bf{}{{Bd{c}}}}}}{{{Bj{{Bh{g}}}}Bl}{{Bn{i}}}{}{{Bb{C`}}}{{Cd{}{{Cb{{j{ce}}}}}}}{}}{{{Af{g}}Bl}{{Bn{{j{A`i}}}}}{}{}{{An{{Ah{c}}}{{Aj{{Al{e}}}}}}}{}}{{AbCf}Ab}0{ce{}{}}0{c{{j{e}}}{}{}}00000{cl{}}00","c":[],"p":[[6,"Error",4],[5,"Formatter",69],[8,"Result",69],[5,"String",70],[6,"Result",71],[5,"TypeId",72],[5,"Host",17],[1,"unit"],[5,"AllowedHostLayer",28],[1,"slice"],[5,"AllowedHost",28],[5,"Request",73],[17,"Response"],[5,"Response",74],[10,"Service",75],[10,"Clone",76],[10,"Into",77],[17,"Item"],[10,"IntoIterator",78],[5,"AllowedHostFuture",28],[5,"Pin",79],[5,"Context",80],[6,"Poll",81],[8,"BoxError",82],[17,"Output"],[10,"Future",83],[1,"bool"]],"b":[[9,"impl-Debug-for-Error"],[10,"impl-Display-for-Error"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
