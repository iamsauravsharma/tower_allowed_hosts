searchState.loadedDescShard("tower_allowed_hosts", 0, "Crate which provides allowed hosts layer for tower based …\nA layer that validates and allows incoming requests based …\nStruct which holds value of host\nmodule for error\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nmodule for matcher\nmodule for layer, service and future\nEnum for different error generated from crates\nerror raised when host is not allowed\nerror when passed forwarded header is invalid\nerror when passed host header is invalid\nerror when uri is missing along with host header\nerror when passed host header is missing\nerror when there is multiple host header\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAsterisk matcher which always returns true and matches any …\nTrait for checking if a given value matches a specific …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if provided value matches according to matcher\nAllowed hosts service that wraps the inner service and …\nFuture for <code>AllowedHost</code> service.\nA layer that validates and allows incoming requests based …\nExtend allowed hosts layer with provided forwarded header …\nExtend allowed hosts layer with provided hosts\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd a token-value pair for matching in the <code>Forwarded</code> …\nAdd a host to allowed hosts layer")