rd_("CkOr matcher which matches when either left and right matchesCkAnd matcher which matches only when both left and right \xe2\x80\xa6CjAny matcher which always returns true and matches any hostChCreate new allowed host layer with provided host matcherAfCreate new and matcherAeCreate new or matcherB`Struct which holds value of hostAoReturns the argument unchanged.0000000BaCalls <code>U::from(self)</code>.0000000AhEnum for different error0A`module for errorBdTrait for matching against the valueAbmodule for matcherBdmodule for layer, service and futureCjAllowed hosts service that wraps the inner service and \xe2\x80\xa6CeChecks if provided value matches according to matcherBeerror raised when host is not allowed0ClTrait for matching the presence and values of parameters \xe2\x80\xa6CmA layer that validates and allows incoming requests based \xe2\x80\xa60C`error when uri is missing along with host header0BlFuture for <code>AllowedHost</code> service.Bherror when passed host header is invalid0Bherror when passed host header is missing07Bherror when there is multiple host header0ClCrate which provides allowed hosts layer for tower based \xe2\x80\xa6Bmerror when passed forwarded header is invalid0CeExtend a host matcher with provided forwarded matcher")